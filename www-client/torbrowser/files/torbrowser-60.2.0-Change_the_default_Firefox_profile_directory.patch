From 03b35140c47543487fbf424c05165969077d2c66 Mon Sep 17 00:00:00 2001
From: Poncho <poncho@spahan.ch>
Date: Fri, 7 Sep 2018 11:57:53 +0200
Subject: [PATCH 1/3] Revert "Bug 9173: Change the default Firefox profile
 directory to be TBB-relative."

This reverts commit 990be192b29960299d6a9ac09c97b7f4b0d93801.
---
 toolkit/xre/nsXREDirProvider.cpp       | 142 ++++++++++++++++++++++++++++-----
 toolkit/xre/nsXREDirProvider.h         |  12 +--
 xpcom/io/nsAppFileLocationProvider.cpp |  89 ++++++++++++++-------
 3 files changed, 191 insertions(+), 52 deletions(-)

diff --git a/toolkit/xre/nsXREDirProvider.cpp b/toolkit/xre/nsXREDirProvider.cpp
index b54985292e81..a409a0aadf6f 100644
--- a/toolkit/xre/nsXREDirProvider.cpp
+++ b/toolkit/xre/nsXREDirProvider.cpp
@@ -32,7 +32,6 @@
 #include "nsArrayEnumerator.h"
 #include "nsEnumeratorUtils.h"
 #include "nsReadableUtils.h"
-#include "nsXPCOMPrivate.h"  // for XPCOM_FILE_PATH_SEPARATOR
 
 #include "SpecialSystemDirectory.h"
 
@@ -231,6 +230,9 @@ nsXREDirProvider::GetUserProfilesRootDir(nsIFile** aResult)
   nsresult rv = GetUserDataDirectory(getter_AddRefs(file), false);
 
   if (NS_SUCCEEDED(rv)) {
+#if !defined(XP_UNIX) || defined(XP_MACOSX)
+    rv = file->AppendNative(NS_LITERAL_CSTRING("Profiles"));
+#endif
     // We must create the profile directory here if it does not exist.
     nsresult tmp = EnsureDirectoryExists(file);
     if (NS_FAILED(tmp)) {
@@ -248,6 +250,9 @@ nsXREDirProvider::GetUserProfilesLocalDir(nsIFile** aResult)
   nsresult rv = GetUserDataDirectory(getter_AddRefs(file), true);
 
   if (NS_SUCCEEDED(rv)) {
+#if !defined(XP_UNIX) || defined(XP_MACOSX)
+    rv = file->AppendNative(NS_LITERAL_CSTRING("Profiles"));
+#endif
     // We must create the profile directory here if it does not exist.
     nsresult tmp = EnsureDirectoryExists(file);
     if (NS_FAILED(tmp)) {
@@ -1427,26 +1432,87 @@ nsresult
 nsXREDirProvider::GetUserDataDirectoryHome(nsIFile** aFile, bool aLocal)
 {
   // Copied from nsAppFileLocationProvider (more or less)
-  NS_ENSURE_ARG_POINTER(aFile);
+  nsresult rv;
   nsCOMPtr<nsIFile> localDir;
 
-  nsresult rv = GetTorBrowserUserDataDir(getter_AddRefs(localDir));
-  NS_ENSURE_SUCCESS(rv, rv);
-
-#if !defined(ANDROID)
-#ifdef TOR_BROWSER_DATA_OUTSIDE_APP_DIR
-  rv = localDir->AppendNative(NS_LITERAL_CSTRING("Browser"));
+#if defined(XP_MACOSX)
+  FSRef fsRef;
+  OSType folderType;
+  if (aLocal) {
+    folderType = kCachedDataFolderType;
+  } else {
+#ifdef MOZ_THUNDERBIRD
+    folderType = kDomainLibraryFolderType;
 #else
-  rv = localDir->AppendRelativeNativePath(NS_LITERAL_CSTRING("Data"
-                                     XPCOM_FILE_PATH_SEPARATOR "Browser"));
+    folderType = kApplicationSupportFolderType;
 #endif
+  }
+  OSErr err = ::FSFindFolder(kUserDomain, folderType, kCreateFolder, &fsRef);
+  NS_ENSURE_FALSE(err, NS_ERROR_FAILURE);
+
+  rv = NS_NewNativeLocalFile(EmptyCString(), true, getter_AddRefs(localDir));
   NS_ENSURE_SUCCESS(rv, rv);
+
+  nsCOMPtr<nsILocalFileMac> dirFileMac = do_QueryInterface(localDir);
+  NS_ENSURE_TRUE(dirFileMac, NS_ERROR_UNEXPECTED);
+
+  rv = dirFileMac->InitWithFSRef(&fsRef);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  localDir = do_QueryInterface(dirFileMac, &rv);
+#elif defined(XP_IOS)
+  nsAutoCString userDir;
+  if (GetUIKitDirectory(aLocal, userDir)) {
+    rv = NS_NewNativeLocalFile(userDir, true, getter_AddRefs(localDir));
+  } else {
+    rv = NS_ERROR_FAILURE;
+  }
+  NS_ENSURE_SUCCESS(rv, rv);
+#elif defined(XP_WIN)
+  nsString path;
+  if (aLocal) {
+    rv = GetShellFolderPath(FOLDERID_LocalAppData, path);
+    if (NS_FAILED(rv))
+      rv = GetRegWindowsAppDataFolder(aLocal, path);
+  }
+  if (!aLocal || NS_FAILED(rv)) {
+    rv = GetShellFolderPath(FOLDERID_RoamingAppData, path);
+    if (NS_FAILED(rv)) {
+      if (!aLocal)
+        rv = GetRegWindowsAppDataFolder(aLocal, path);
+    }
+  }
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  rv = NS_NewLocalFile(path, true, getter_AddRefs(localDir));
+#elif defined(XP_UNIX)
+  const char* homeDir = getenv("HOME");
+  if (!homeDir || !*homeDir)
+    return NS_ERROR_FAILURE;
+
+#ifdef ANDROID /* We want (ProfD == ProfLD) on Android. */
+  aLocal = false;
 #endif
 
   if (aLocal) {
-    rv = localDir->AppendNative(NS_LITERAL_CSTRING("Caches"));
-    NS_ENSURE_SUCCESS(rv, rv);
+    // If $XDG_CACHE_HOME is defined use it, otherwise use $HOME/.cache.
+    const char* cacheHome = getenv("XDG_CACHE_HOME");
+    if (cacheHome && *cacheHome) {
+      rv = NS_NewNativeLocalFile(nsDependentCString(cacheHome), true,
+                                 getter_AddRefs(localDir));
+    } else {
+      rv = NS_NewNativeLocalFile(nsDependentCString(homeDir), true,
+                                 getter_AddRefs(localDir));
+      if (NS_SUCCEEDED(rv))
+        rv = localDir->AppendNative(NS_LITERAL_CSTRING(".cache"));
+    }
+  } else {
+    rv = NS_NewNativeLocalFile(nsDependentCString(homeDir), true,
+                               getter_AddRefs(localDir));
   }
+#else
+#error "Don't know how to get product dir on your platform"
+#endif
 
   NS_IF_ADDREF(*aFile = localDir);
   return rv;
@@ -1645,23 +1711,41 @@ nsXREDirProvider::AppendProfilePath(nsIFile* aFile, bool aLocal)
   }
 
   nsAutoCString profile;
+  nsAutoCString appName;
+  nsAutoCString vendor;
   if (gAppData->profile) {
     profile = gAppData->profile;
+  } else {
+    appName = gAppData->name;
+    vendor = gAppData->vendor;
   }
 
-  nsresult rv = NS_ERROR_FAILURE;
+  nsresult rv;
 
 #if defined (XP_MACOSX)
   if (!profile.IsEmpty()) {
     rv = AppendProfileString(aFile, profile.get());
-    NS_ENSURE_SUCCESS(rv, rv);
   }
+  else {
+    // Note that MacOS ignores the vendor when creating the profile hierarchy -
+    // all application preferences directories live alongside one another in
+    // ~/Library/Application Support/
+    rv = aFile->AppendNative(appName);
+  }
+  NS_ENSURE_SUCCESS(rv, rv);
 
 #elif defined(XP_WIN)
   if (!profile.IsEmpty()) {
     rv = AppendProfileString(aFile, profile.get());
-    NS_ENSURE_SUCCESS(rv, rv);
   }
+  else {
+    if (!vendor.IsEmpty()) {
+      rv = aFile->AppendNative(vendor);
+      NS_ENSURE_SUCCESS(rv, rv);
+    }
+    rv = aFile->AppendNative(appName);
+  }
+  NS_ENSURE_SUCCESS(rv, rv);
 
 #elif defined(ANDROID)
   // The directory used for storing profiles
@@ -1671,6 +1755,12 @@ nsXREDirProvider::AppendProfilePath(nsIFile* aFile, bool aLocal)
   rv = aFile->AppendNative(nsDependentCString("mozilla"));
   NS_ENSURE_SUCCESS(rv, rv);
 #elif defined(XP_UNIX)
+  nsAutoCString folder;
+  // Make it hidden (by starting with "."), except when local (the
+  // profile is already under ~/.cache or XDG_CACHE_HOME).
+  if (!aLocal)
+    folder.Assign('.');
+
   if (!profile.IsEmpty()) {
     // Skip any leading path characters
     const char* profileStart = profile.get();
@@ -1679,17 +1769,31 @@ nsXREDirProvider::AppendProfilePath(nsIFile* aFile, bool aLocal)
 
     // On the off chance that someone wanted their folder to be hidden don't
     // let it become ".."
-    if (*profileStart == '.')
+    if (*profileStart == '.' && !aLocal)
       profileStart++;
 
-    // Make it hidden (by starting with ".").
-    nsAutoCString folder(".");
     folder.Append(profileStart);
     ToLowerCase(folder);
 
     rv = AppendProfileString(aFile, folder.BeginReading());
-    NS_ENSURE_SUCCESS(rv, rv);
   }
+  else {
+    if (!vendor.IsEmpty()) {
+      folder.Append(vendor);
+      ToLowerCase(folder);
+
+      rv = aFile->AppendNative(folder);
+      NS_ENSURE_SUCCESS(rv, rv);
+
+      folder.Truncate();
+    }
+
+    folder.Append(appName);
+    ToLowerCase(folder);
+
+    rv = aFile->AppendNative(folder);
+  }
+  NS_ENSURE_SUCCESS(rv, rv);
 
 #else
 #error "Don't know how to get profile path on your platform"
diff --git a/toolkit/xre/nsXREDirProvider.h b/toolkit/xre/nsXREDirProvider.h
index 4f2e08821e2a..80c0a27baa1b 100644
--- a/toolkit/xre/nsXREDirProvider.h
+++ b/toolkit/xre/nsXREDirProvider.h
@@ -50,15 +50,15 @@ public:
 
   void DoShutdown();
 
-  nsresult GetUserAppDataDirectory(nsIFile* *aFile) {
+  static nsresult GetUserAppDataDirectory(nsIFile* *aFile) {
     return GetUserDataDirectory(aFile, false);
   }
-  nsresult GetUserLocalDataDirectory(nsIFile* *aFile) {
+  static nsresult GetUserLocalDataDirectory(nsIFile* *aFile) {
     return GetUserDataDirectory(aFile, true);
   }
 
   // GetUserDataDirectory gets the profile path from gAppData.
-  nsresult GetUserDataDirectory(nsIFile** aFile, bool aLocal);
+  static nsresult GetUserDataDirectory(nsIFile** aFile, bool aLocal);
 
   /* make sure you clone it, if you need to do stuff to it */
   nsIFile* GetGREDir() { return mGREDir; }
@@ -98,9 +98,9 @@ public:
 
 protected:
   nsresult GetFilesInternal(const char* aProperty, nsISimpleEnumerator** aResult);
-  nsresult GetUserDataDirectoryHome(nsIFile* *aFile, bool aLocal);
-  nsresult GetSysUserExtensionsDirectory(nsIFile* *aFile);
-  nsresult GetSysUserExtensionsDevDirectory(nsIFile* *aFile);
+  static nsresult GetUserDataDirectoryHome(nsIFile* *aFile, bool aLocal);
+  static nsresult GetSysUserExtensionsDirectory(nsIFile* *aFile);
+  static nsresult GetSysUserExtensionsDevDirectory(nsIFile* *aFile);
 #if defined(XP_UNIX) || defined(XP_MACOSX)
   static nsresult GetSystemExtensionsDirectory(nsIFile** aFile);
 #endif
diff --git a/xpcom/io/nsAppFileLocationProvider.cpp b/xpcom/io/nsAppFileLocationProvider.cpp
index 21ade8ed64d8..2b4e59d9017b 100644
--- a/xpcom/io/nsAppFileLocationProvider.cpp
+++ b/xpcom/io/nsAppFileLocationProvider.cpp
@@ -14,7 +14,6 @@
 #include "nsISimpleEnumerator.h"
 #include "prenv.h"
 #include "nsCRT.h"
-#include "nsXPCOMPrivate.h"  // for XPCOM_FILE_PATH_SEPARATOR
 #if defined(MOZ_WIDGET_COCOA)
 #include <Carbon/Carbon.h>
 #include "nsILocalFileMac.h"
@@ -254,14 +253,9 @@ nsAppFileLocationProvider::CloneMozBinDirectory(nsIFile** aLocalFile)
 //----------------------------------------------------------------------------------------
 // GetProductDirectory - Gets the directory which contains the application data folder
 //
-#ifdef TOR_BROWSER_DATA_OUTSIDE_APP_DIR
-// UNIX and WIN   : <App Folder>/../TorBrowser-Data/Browser
-// Mac            : <App Folder>/../../../TorBrowser-Data/Browser OR
-//                  ~/Library/Application Support/TorBrowser-Data/Browser
-#else
-// UNIX and WIN   : <App Folder>/TorBrowser/Data/Browser
-// Mac            : <App Folder>/../../TorBrowser/Data/Browser
-#endif
+// UNIX   : ~/.mozilla/
+// WIN    : <Application Data folder on user's machine>\Mozilla
+// Mac    : :Documents:Mozilla:
 //----------------------------------------------------------------------------------------
 nsresult
 nsAppFileLocationProvider::GetProductDirectory(nsIFile** aLocalFile,
@@ -275,28 +269,48 @@ nsAppFileLocationProvider::GetProductDirectory(nsIFile** aLocalFile,
   bool exists;
   nsCOMPtr<nsIFile> localDir, exeFile;
 
-  nsCOMPtr<nsIProperties> directoryService(
-                         do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &rv));
-  NS_ENSURE_SUCCESS(rv, rv);
-  rv = directoryService->Get(XRE_EXECUTABLE_FILE, NS_GET_IID(nsIFile),
-                             getter_AddRefs(exeFile));
-  NS_ENSURE_SUCCESS(rv, rv);
-  rv = TorBrowser_GetUserDataDir(exeFile, getter_AddRefs(localDir));
-  NS_ENSURE_SUCCESS(rv, rv);
-
-#ifdef TOR_BROWSER_DATA_OUTSIDE_APP_DIR
-  rv = localDir->AppendNative(NS_LITERAL_CSTRING("Browser"));
+#if defined(MOZ_WIDGET_COCOA)
+  FSRef fsRef;
+  OSType folderType = aLocal ? (OSType)kCachedDataFolderType :
+                               (OSType)kDomainLibraryFolderType;
+  OSErr err = ::FSFindFolder(kUserDomain, folderType, kCreateFolder, &fsRef);
+  if (err) {
+    return NS_ERROR_FAILURE;
+  }
+  NS_NewLocalFile(EmptyString(), true, getter_AddRefs(localDir));
+  if (!localDir) {
+    return NS_ERROR_FAILURE;
+  }
+  nsCOMPtr<nsILocalFileMac> localDirMac(do_QueryInterface(localDir));
+  rv = localDirMac->InitWithFSRef(&fsRef);
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
+#elif defined(XP_WIN)
+  nsCOMPtr<nsIProperties> directoryService =
+    do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &rv);
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
+  const char* prop = aLocal ? NS_WIN_LOCAL_APPDATA_DIR : NS_WIN_APPDATA_DIR;
+  rv = directoryService->Get(prop, NS_GET_IID(nsIFile), getter_AddRefs(localDir));
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
+#elif defined(XP_UNIX)
+  rv = NS_NewNativeLocalFile(nsDependentCString(PR_GetEnv("HOME")), true,
+                             getter_AddRefs(localDir));
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
 #else
-  rv = localDir->AppendRelativeNativePath(NS_LITERAL_CSTRING("Data"
-                                        XPCOM_FILE_PATH_SEPARATOR "Browser"));
+#error dont_know_how_to_get_product_dir_on_your_platform
 #endif
-  NS_ENSURE_SUCCESS(rv, rv);
 
-  if (aLocal) {
-    rv = localDir->AppendNative(NS_LITERAL_CSTRING("Caches"));
-    NS_ENSURE_SUCCESS(rv, rv);
+  rv = localDir->AppendRelativeNativePath(DEFAULT_PRODUCT_DIR);
+  if (NS_FAILED(rv)) {
+    return rv;
   }
-
   rv = localDir->Exists(&exists);
 
   if (NS_SUCCEEDED(rv) && !exists) {
@@ -315,6 +329,10 @@ nsAppFileLocationProvider::GetProductDirectory(nsIFile** aLocalFile,
 
 //----------------------------------------------------------------------------------------
 // GetDefaultUserProfileRoot - Gets the directory which contains each user profile dir
+//
+// UNIX   : ~/.mozilla/
+// WIN    : <Application Data folder on user's machine>\Mozilla\Profiles
+// Mac    : :Documents:Mozilla:Profiles:
 //----------------------------------------------------------------------------------------
 nsresult
 nsAppFileLocationProvider::GetDefaultUserProfileRoot(nsIFile** aLocalFile,
@@ -332,6 +350,23 @@ nsAppFileLocationProvider::GetDefaultUserProfileRoot(nsIFile** aLocalFile,
     return rv;
   }
 
+#if defined(MOZ_WIDGET_COCOA) || defined(XP_WIN)
+  // These 3 platforms share this part of the path - do them as one
+  rv = localDir->AppendRelativeNativePath(NS_LITERAL_CSTRING("Profiles"));
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
+
+  bool exists;
+  rv = localDir->Exists(&exists);
+  if (NS_SUCCEEDED(rv) && !exists) {
+    rv = localDir->Create(nsIFile::DIRECTORY_TYPE, 0775);
+  }
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
+#endif
+
   localDir.forget(aLocalFile);
 
   return rv;
-- 
2.16.4

